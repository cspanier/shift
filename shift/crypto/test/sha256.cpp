#include <shift/crypto/sha256.h>
#include <shift/core/boost_disable_warnings.h>
#include <boost/test/unit_test.hpp>
#include <shift/core/boost_restore_warnings.h>

using namespace shift::crypto;

bool compare_digest(const sha256::digest_t& lhs, const sha256::digest_t& rhs)
{
  for (std::size_t i = 0u; i != lhs.size(); ++i)
  {
    if (lhs[i] != rhs[i])
      return false;
  }
  return true;
}

BOOST_AUTO_TEST_CASE(crypto_sha256)
{
  {
    // Empty hash.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      context.finalize(),
      sha256::digest_t{{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
                        0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
                        0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
                        0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}));
  }

  {
    // Very short text.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      (context << "x").finalize(),
      sha256::digest_t{{0x2d, 0x71, 0x16, 0x42, 0xb7, 0x26, 0xb0, 0x44,
                        0x01, 0x62, 0x7c, 0xa9, 0xfb, 0xac, 0x32, 0xf5,
                        0xc8, 0x53, 0x0f, 0xb1, 0x90, 0x3c, 0xc4, 0xdb,
                        0x02, 0x25, 0x87, 0x17, 0x92, 0x1a, 0x48, 0x81}}));
  }

  {
    // Short text.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      (context << "The quick brown fox jumps over the lazy dog").finalize(),
      sha256::digest_t{{0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,
                        0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,
                        0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,
                        0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92}}));
  }

  {
    // Text longer than one block.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      (context << "The quick brown fox jumps over the lazy dog and the quick "
                  "brown fox jumps over the lazy dog")
        .finalize(),
      sha256::digest_t{{0xe0, 0x5c, 0x9d, 0x6e, 0x4c, 0xe8, 0x33, 0xe3,
                        0xb7, 0x8e, 0x5d, 0x5d, 0x0f, 0x7a, 0xbc, 0xc1,
                        0x16, 0x92, 0x6e, 0xb6, 0xec, 0xbe, 0xba, 0x9b,
                        0xdd, 0x62, 0xe9, 0x62, 0xa0, 0x3c, 0xca, 0x01}}));
  }

  {
    // Split text.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      (context << "The quick brown fox jumps over the lazy dog and the "
               << "quick brown fox jumps over the lazy dog")
        .finalize(),
      sha256::digest_t{{0xe0, 0x5c, 0x9d, 0x6e, 0x4c, 0xe8, 0x33, 0xe3,
                        0xb7, 0x8e, 0x5d, 0x5d, 0x0f, 0x7a, 0xbc, 0xc1,
                        0x16, 0x92, 0x6e, 0xb6, 0xec, 0xbe, 0xba, 0x9b,
                        0xdd, 0x62, 0xe9, 0x62, 0xa0, 0x3c, 0xca, 0x01}}));
  }

  {
    // Split text.
    sha256::digest_t digest{};
    sha256 context(digest);
    BOOST_CHECK(compare_digest(
      (context << "The quick brown fox jumps over the lazy dog and the quick "
                  "brown fox jumps over the lazy "
               << "dog")
        .finalize(),
      sha256::digest_t{{0xe0, 0x5c, 0x9d, 0x6e, 0x4c, 0xe8, 0x33, 0xe3,
                        0xb7, 0x8e, 0x5d, 0x5d, 0x0f, 0x7a, 0xbc, 0xc1,
                        0x16, 0x92, 0x6e, 0xb6, 0xec, 0xbe, 0xba, 0x9b,
                        0xdd, 0x62, 0xe9, 0x62, 0xa0, 0x3c, 0xca, 0x01}}));
  }
}
